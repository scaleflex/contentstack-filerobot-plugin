{"version":3,"file":"static/js/772.2e9bd7fa.chunk.js","mappings":"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","sources":["common/utils/SelectorPageUtils.tsx","root_config/CustomComponent/index.tsx","root_config/ConfigScreen/index.tsx","common/asset/logo.svg","root_config/DamEnv/index.ts","root_config/utils/index.tsx","root_config/CustomField/index.tsx","root_config/SelectorPage/index.tsx","root_config/index.tsx","containers/SelectorPage/index.tsx"],"sourcesContent":["// function to load script\nconst loadDAMScript = (url: string) =>\n  new Promise((resolve) => {\n    const scriptExists = document.getElementById(\"DAMScript\");\n    if (scriptExists) {\n      scriptExists.onload = function () {\n        resolve(true);\n      };\n    } else {\n      const DAMScript: any = document.createElement(\"script\");\n      const bodyTag = document.getElementsByTagName(\"body\")?.[0];\n      DAMScript.src = url;\n      DAMScript.id = \"DAMScript\";\n      DAMScript.type = \"text/javascript\";\n      if (DAMScript?.readyState) {\n        DAMScript.onreadystatechange = function () {\n          if (\n            DAMScript.readyState === \"loaded\" ||\n            DAMScript.readyState === \"complete\"\n          ) {\n            DAMScript.onreadystatechange = null;\n            resolve(true);\n          }\n        };\n      } else {\n        DAMScript.onload = function () {\n          resolve(true);\n        };\n      }\n      bodyTag.appendChild(DAMScript);\n    }\n  });\n\nconst SelectorPageUtils = {\n  loadDAMScript,\n};\n\nexport default SelectorPageUtils;\n","import React from \"react\";\n\ninterface TypeCustomComponent {}\n\nconst CustomComponent: React.FC<TypeCustomComponent> = function () {\n  return (\n    <div className=\"config-custom-component\">\n      Custom Component - This is a custom component and can be modified using\n      root_config\n    </div>\n  );\n};\n\nexport default CustomComponent;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* NOTE: Remove Functions which are not used */\n\nimport React from \"react\";\nimport CustomComponent from \"../CustomComponent\";\nimport {\n  TypeCustomConfigUpdateParams,\n  TypeRootConfigSreen,\n} from \"../../common/types/types\";\n\nconst configureConfigScreen = () =>\n  /* IMPORTANT: \n  1. All sensitive information must be saved in serverConfig\n  2. serverConfig is used when webhooks are implemented\n  3. save the fields that are to be accessed in other location in config\n  4. either saveInConfig or saveInServerConfig should be true for your field data to be saved in contentstack\n  5. If values are stored in serverConfig then those values will not be available to other UI locations\n  6. Supported type options are textInputFields, radioInputFields, selectInputFields */\n  ({\n    textField: {\n      type: \"textInputFields\",\n      labelText: \"DAM Text Input\",\n      helpText: \"DAM Text Input Helptext\",\n      placeholderText: \"DAM Text Input Placeholder\",\n      instructionText: \"DAM Text Input Instruction Text\",\n      inputFieldType: \"password\", // type: 'text' | 'password' | 'email' | 'number' | 'search' | 'url' | 'date' | 'time' | string;\n      saveInConfig: false,\n      saveInServerConfig: true,\n    },\n    selectField: {\n      type: \"selectInputFields\",\n      labelText: \"DAM Select Input\",\n      helpText: \"DAM Select Input Helptext\",\n      placeholderText: \"DAM Select Input Placeholder\",\n      instructionText: \"DAM Select Input Instruction Text\",\n      options: [\n        { label: \"option 1\", value: \"option1\" },\n        { label: \"option 2\", value: \"option2\" },\n        { label: \"option 3\", value: \"option3\" },\n        { label: \"option 4\", value: \"option4\" },\n        { label: \"option 5\", value: \"option5\" },\n      ],\n      defaultSelectedOption: \"option5\",\n      saveInConfig: true,\n      saveInServerConfig: false,\n    },\n    radioField: {\n      type: \"radioInputFields\",\n      labelText: \"DAM Radio Input\",\n      helpText: \"DAM Radio Input Helptext\",\n      instructionText: \"DAM Radio Input Instruction Text\",\n      options: [\n        {\n          label: \"Single Select\",\n          value: \"SingleSelect\",\n        },\n        {\n          label: \"Multi Select\",\n          value: \"MultiSelect\",\n        },\n      ],\n      defaultSelectedOption: \"MultiSelect\",\n      saveInConfig: true,\n      saveInServerConfig: false,\n    },\n  });\n\nconst customConfigComponent = (\n  config: any,\n  serverConfig: any,\n  handleCustomConfigUpdate: (\n    updateConfigObj: TypeCustomConfigUpdateParams\n  ) => void\n) => <CustomComponent />;\n\nconst customWholeJson = () => {\n  const customJsonOptions: string[] = [\n    \"option 1\",\n    \"option 2\",\n    \"option 3\",\n    \"option 4\",\n    \"option 5\",\n    \"option 6\",\n    \"option 7\",\n    \"option 8\",\n    \"option 9\",\n    \"option 10\",\n  ];\n\n  const defaultFeilds: string[] = [\"option 1\", \"option 2\", \"option 3\"];\n\n  return {\n    customJsonOptions,\n    defaultFeilds,\n  };\n};\n\nconst rootConfigScreen: TypeRootConfigSreen = {\n  configureConfigScreen,\n  customConfigComponent,\n  customWholeJson,\n};\n\nexport default rootConfigScreen;\n","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgLogo(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 512,\n    height: 512,\n    viewBox: \"0 0 512 512\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M340.283 232.249C340.283 235.073 338.485 236.871 335.661 236.871H246.562C243.737 236.871 241.94 235.073 241.94 232.249V221.978C241.94 219.153 243.737 217.356 246.562 217.356H335.661C338.485 217.356 340.283 219.153 340.283 221.978V232.249ZM379.825 261.007C379.825 263.832 378.028 265.629 375.204 265.629H265.306C262.481 265.629 260.684 263.832 260.684 261.007V250.736C260.684 247.912 262.481 246.114 265.306 246.114H374.177C377.001 246.114 378.798 247.912 378.798 250.736L379.825 261.007ZM409.868 291.049C409.868 293.874 408.07 295.671 405.246 295.671H286.104C283.28 295.671 281.482 293.874 281.482 291.049V280.778C281.482 277.954 283.28 276.156 286.104 276.156H405.246C408.07 276.156 409.868 277.954 409.868 280.778V291.049ZM409.868 320.834C409.868 323.659 408.07 325.456 405.246 325.456H286.104C283.28 325.456 281.482 323.659 281.482 320.834V310.564C281.482 307.739 283.28 305.942 286.104 305.942H405.246C408.07 305.942 409.868 307.739 409.868 310.564V320.834ZM379.825 349.593C379.825 352.417 378.028 354.215 375.204 354.215H265.306C262.481 354.215 260.684 352.417 260.684 349.593V339.322C260.684 336.498 262.481 334.7 265.306 334.7H374.177C377.001 334.7 378.798 336.498 378.798 339.322L379.825 349.593ZM340.283 379.378C340.283 382.203 338.485 384 335.661 384H246.562C243.737 384 241.94 382.203 241.94 379.378V369.107C241.94 366.283 243.737 364.485 246.562 364.485H335.661C338.485 364.485 340.283 366.283 340.283 369.107V379.378ZM171.585 142.893C171.585 145.717 173.382 147.515 176.207 147.515H265.306C268.13 147.515 269.928 145.717 269.928 142.893V132.622C269.928 129.797 268.13 128 265.306 128H176.207C173.382 128 171.585 129.797 171.585 132.622V142.893ZM132.042 172.678C132.042 175.503 133.84 177.3 136.664 177.3H245.535C248.359 177.3 250.156 175.503 250.156 172.678V162.407C250.156 159.583 248.359 157.785 245.535 157.785H136.664C133.84 157.785 132.042 159.583 132.042 162.407V172.678ZM102 202.463C102 205.288 103.797 207.085 106.622 207.085H225.763C228.588 207.085 230.385 205.288 230.385 202.463V192.193C230.385 189.368 228.588 187.571 225.763 187.571H106.622C103.797 187.571 102 189.368 102 192.193V202.463ZM102 232.249C102 235.073 103.797 236.871 106.622 236.871H225.763C228.588 236.871 230.385 235.073 230.385 232.249V221.978C230.385 219.153 228.588 217.356 225.763 217.356H106.622C103.797 217.356 102 219.153 102 221.978V232.249ZM132.042 261.007C132.042 263.832 133.84 265.629 136.664 265.629H245.535C248.359 265.629 250.156 263.832 250.156 261.007V250.736C250.156 247.912 248.359 246.114 245.535 246.114H136.664C133.84 246.114 132.042 247.912 132.042 250.736V261.007ZM171.585 291.049C171.585 293.874 173.382 295.671 176.207 295.671H265.306C268.13 295.671 269.928 293.874 269.928 291.049V280.778C269.928 277.954 268.13 276.156 265.306 276.156H176.207C173.382 276.156 171.585 277.954 171.585 280.778V291.049Z\",\n    fill: \"#F0553D\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgLogo);\nexport default __webpack_public_path__ + \"static/media/logo.4bc872cb5922dbff5df01ff573cd6cf5.svg\";\nexport { ForwardRef as ReactComponent };","import Logo from \"../../common/asset/logo.svg\";\nimport { TypeRootDamEnv } from \"../../common/types/types\";\n\nconst DamEnvVariables: TypeRootDamEnv = {\n  DAM_APP_NAME: \"Filerobot\",\n  ASSET_UNIQUE_ID: \"id\",\n  SELECTOR_PAGE_LOGO: Logo,\n  CONFIG_FIELDS: [],\n  IS_DAM_SCRIPT: false,\n  DAM_SCRIPT_URL: \"\",\n  DIRECT_SELECTOR_PAGE: \"novalue\", // possible values \"url\", \"window\", default => \"novalue\"\n};\n\nexport default DamEnvVariables;\n","/* Utility functions for root_config */\n\ninterface TypeSelectorConfig {\n  keyArr: string[];\n  appConfig: any;\n  customConfig: any;\n  currentLocale: string;\n  pairs?: string[];\n  valueChecks?: any;\n}\n\ninterface TypeLocaleConfigData {\n  customConfig: any;\n  currentLocale: string;\n  returnConfig: any;\n  mapArr: string[];\n  valueChecks: any;\n  pairs?: string[];\n}\n\nconst getFilteredConfigObj = (\n  mapArr: string[],\n  checkObj: any,\n  valueChecks: any\n) => {\n  const returnObj: any = {};\n  mapArr?.forEach((key: string) => {\n    if (key in checkObj && checkObj?.[key] !== \"\") {\n      if (\n        valueChecks &&\n        key in valueChecks &&\n        Array.isArray(valueChecks[key]) &&\n        valueChecks[key]?.length\n      ) {\n        if (valueChecks[key]?.includes(checkObj[key]))\n          returnObj[key] = checkObj[key];\n      } else {\n        returnObj[key] = checkObj[key];\n      }\n    }\n  });\n  return returnObj;\n};\n\nconst compareFn = (a: string, b: string): number => {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst checkArrEqual = (arr1: string[], arr2: string[]) =>\n  [...arr1]?.sort(compareFn)?.join(\",\") ===\n  [...arr2]?.sort(compareFn)?.join(\",\");\n\nconst handleLocaleConfig = (data: TypeLocaleConfigData) => {\n  const {\n    customConfig,\n    currentLocale,\n    returnConfig,\n    mapArr,\n    valueChecks,\n    pairs,\n  } = data;\n  let returnValue = { ...returnConfig };\n  // prettier-ignore\n  if (('locale' in customConfig) && (currentLocale in (customConfig?.locale ?? {}))) {\n\t\tconst localeConfigObj = customConfig?.locale?.[currentLocale];\n\t\tif (\n\t\t\ttypeof localeConfigObj === 'object' &&\n\t\t\t!Array.isArray(localeConfigObj) &&\n\t\t\tlocaleConfigObj !== null\n\t\t) {\n\t\t\treturnValue = {\n\t\t\t\t...returnValue,\n\t\t\t\t...getFilteredConfigObj(mapArr, localeConfigObj, valueChecks),\n      };\n      if (pairs) {\n        const tempConfig: any = {\n          ...getFilteredConfigObj(pairs, localeConfigObj, valueChecks),\n        };\n        if (checkArrEqual(pairs, Object.keys(tempConfig))) {\n          returnValue = { ...returnValue, ...tempConfig };\n        }\n      }\n\t\t}\n\t}\n  return returnValue;\n};\n\nconst getSelectorConfig = (props: TypeSelectorConfig) => {\n  const { keyArr, appConfig, customConfig, currentLocale, pairs, valueChecks } =\n    props;\n  // if no customConfig\n  if (!Object.keys(customConfig)?.length) return appConfig;\n  // if customConfig\n  let returnConfig = { ...appConfig };\n  if (!pairs?.length) {\n    returnConfig = {\n      ...returnConfig,\n      ...getFilteredConfigObj(keyArr, customConfig, valueChecks),\n    };\n    // if locale present in customConfig\n    returnConfig = {\n      ...returnConfig,\n      ...handleLocaleConfig({\n        customConfig,\n        currentLocale,\n        returnConfig,\n        mapArr: keyArr,\n        valueChecks,\n      }),\n    };\n  } else {\n    const modifiedArr = keyArr?.filter((key: string) => !pairs?.includes(key));\n    returnConfig = {\n      ...returnConfig,\n      ...getFilteredConfigObj(modifiedArr, customConfig, valueChecks),\n    };\n    const newConfig: any = {\n      ...getFilteredConfigObj(pairs, customConfig, valueChecks),\n    };\n    if (checkArrEqual(pairs, Object.keys(newConfig))) {\n      returnConfig = { ...returnConfig, ...newConfig };\n    }\n    // if locale present in customConfig\n    returnConfig = {\n      ...returnConfig,\n      ...handleLocaleConfig({\n        customConfig,\n        currentLocale,\n        returnConfig,\n        mapArr: modifiedArr,\n        valueChecks,\n        pairs,\n      }),\n    };\n  }\n  return returnConfig;\n};\n\nconst getAssetType = (extension: string) => {\n  extension = extension?.toLowerCase();\n  let assetType = \"document\";\n  const audioExtensions = [\"mp3\", \"m4a\", \"flac\", \"wav\", \"wma\", \"aac\"];\n  const videoExtnesions = [\n    \"mp4\",\n    \"mov\",\n    \"wmv\",\n    \"avi\",\n    \"avchd\",\n    \"flv\",\n    \"f4v\",\n    \"swf\",\n    \"ogg\",\n  ];\n  const imageExtension = [\n    \"jpeg\",\n    \"jpg\",\n    \"png\",\n    \"gif\",\n    \"bmp\",\n    \"apng\",\n    \"avif\",\n    \"jfif\",\n    \"pjpeg\",\n    \"pjp\",\n    \"svg\",\n    \"webp\",\n    \"ico\",\n    \"cur\",\n    \"tif\",\n    \"tiff\",\n  ];\n  const excelExtension = [\n    \"xlsx\",\n    \"xlsm\",\n    \"xlsb\",\n    \"xltx\",\n    \"xltm\",\n    \"xls\",\n    \"xlt\",\n    \"xml\",\n    \"xlam\",\n    \"xla\",\n    \"xlw\",\n    \"xlr\",\n  ];\n\n  if (videoExtnesions?.includes(extension)) {\n    assetType = \"video\";\n  } else if (audioExtensions?.includes(extension)) {\n    assetType = \"audio\";\n  } else if (imageExtension?.includes(extension)) {\n    assetType = \"image\";\n  } else if (excelExtension?.includes(extension)) {\n    assetType = \"excel\";\n  } else if (extension === \"pdf\") {\n    assetType = \"pdf\";\n  } else if (extension === \"zip\") {\n    assetType = \"zip\";\n  } else if (extension === \"json\") {\n    assetType = \"json\";\n  }\n  return assetType;\n};\n\nconst utils = {\n  getSelectorConfig,\n  getAssetType,\n};\n\nexport default utils;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable arrow-body-style */\n\n/* NOTE: Remove Functions which are not used */\n\nimport {\n  TypeAsset,\n  TypeErrorFn,\n  TypeRootCustomField,\n} from \"../../common/types/types\";\nimport DamEnvVariables from \"../DamEnv\";\nimport utils from \"../utils\";\n\nconst filterAssetData = (assets: any[]) => {\n  const filterAssetArray: TypeAsset[] = assets?.map((asset) =>\n    // Enter your code for filteration of assets to the specified format\n    ({\n      id: \"\",\n      type: \"\",\n      name: \"\",\n      width: \"\",\n      height: \"\",\n      size: \"\", // add size in bytes as string eg.'416246'\n      thumbnailUrl: \"\",\n      previewUrl: \"\", // add this parameter if you want \"Preview\" in tooltip action items\n      platformUrl: \"\", // add this parameter if you want \"Open In DAM\" in tooltip action items\n    })\n  );\n  return filterAssetArray;\n};\n\nconst handleConfigtoSelectorPage = (\n  config: any,\n  contentTypeConfig: any,\n  currentLocale: string\n) =>\n  utils.getSelectorConfig({\n    keyArr: DamEnvVariables?.CONFIG_FIELDS,\n    appConfig: config,\n    customConfig: contentTypeConfig,\n    currentLocale,\n  });\n\nconst getSelectorWindowUrl = (config: any, contentTypeConfig: any) => {\n  return \"\"; // return url to be opened as selector page\n};\n\nconst handleSelectorPageData = (event: any) => {\n  // \"event\" is the event object which is received from your opened selector page\n  return []; // return array of asset objects which are selected\n};\n\nconst handleSelectorWindow = (\n  config: any,\n  contentTypeConfig: any,\n  setError: (errObj: TypeErrorFn) => void\n) => {\n  /* code logic to open the DAM selector window */\n};\n\nconst rootCustomField: TypeRootCustomField = {\n  filterAssetData,\n  getSelectorWindowUrl,\n  handleConfigtoSelectorPage,\n  handleSelectorPageData,\n  handleSelectorWindow,\n};\n\nexport default rootCustomField;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* NOTE: Remove Functions which are not used */\n\nimport React from \"react\";\nimport {\n  TypeErrorFn,\n  TypeRootSelector,\n  TypeSelectorContainer,\n} from \"../../common/types/types\";\nimport CustomComponent from \"../CustomComponent\";\n\n/* These variables are to be used in openCompactView function. The developer should change these variables according to the DAM platform that is being implemented */\ndeclare global {\n  interface Window {\n    CompactView: any; // chnage according to DAM application\n  }\n}\n\nconst openComptactView = (\n  config: any,\n  selectedIds: string[],\n  onSuccess: (assets: any[]) => void,\n  onCancel: () => void,\n  { containerRef, containerClass, containerId }: TypeSelectorContainer,\n  setError: (errObj: TypeErrorFn) => void\n) => {\n  /* Implement your DAM compact view implementation here\n  declare your selected DAM variable in the above scope and call the open function from DAM compact view on that variable\n  use onSuccess function to send your data to custom field [onSuccess accepts an array of asset objects]  */\n};\n\n// If there is no script then provide a custom component here\nconst customSelectorComponent = (\n  config: any,\n  setError: (errObj: TypeErrorFn) => void,\n  successFn: (assets: any[]) => void,\n  closeFn: () => void,\n  selectedAssetIds: string[]\n) => <CustomComponent />;\n\nconst rootSelectorPage: TypeRootSelector = {\n  openComptactView,\n  customSelectorComponent,\n};\n\nexport default rootSelectorPage;\n","import rootConfigScreen from \"./ConfigScreen\";\nimport DamEnvVariables from \"./DamEnv\";\nimport rootCustomField from \"./CustomField\";\nimport rootSelectorPage from \"./SelectorPage\";\nimport { TypeRootConfig } from \"../common/types/types\";\n\n// <------------ ENVIRONMENT VALUES ------------>\n\nconst damEnv = DamEnvVariables;\n\n// <--------- CONFIG SCREEN FUNCTIONS ---------->\n\nconst configureConfigScreen = rootConfigScreen?.configureConfigScreen;\n\nconst customConfigComponent = rootConfigScreen?.customConfigComponent;\n\nconst customWholeJson = rootConfigScreen?.customWholeJson;\n\n// <---------- CUSTOM FIELD FUNCTIONS ---------->\n\nconst filterAssetData = rootCustomField?.filterAssetData;\n\nconst handleConfigtoSelectorPage = rootCustomField?.handleConfigtoSelectorPage;\n\nconst getSelectorWindowUrl = rootCustomField?.getSelectorWindowUrl;\n\nconst handleSelectorPageData = rootCustomField?.handleSelectorPageData;\n\nconst handleSelectorWindow = rootCustomField?.handleSelectorWindow;\n\n// <---------- SELECTOR PAGE FUNCTIONS ---------->\n\nconst openComptactView = rootSelectorPage?.openComptactView;\n\nconst customSelectorComponent = rootSelectorPage?.customSelectorComponent;\n\nconst rootConfig: TypeRootConfig = {\n  damEnv,\n  configureConfigScreen,\n  customConfigComponent,\n  customWholeJson,\n  filterAssetData,\n  getSelectorWindowUrl,\n  handleSelectorPageData,\n  handleSelectorWindow,\n  openComptactView,\n  customSelectorComponent,\n  handleConfigtoSelectorPage,\n};\n\nexport default rootConfig;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { useAppConfig } from \"../../common/hooks/useAppConfig\";\nimport SelectorPageUtils from \"../../common/utils/SelectorPageUtils\";\nimport rootConfig from \"../../root_config\";\nimport { TypeErrorFn } from \"../../common/types/types\";\nimport Explorer from '@filerobot/explorer'\nimport Filerobot from '@filerobot/core'\nimport XHRUpload from '@filerobot/xhr-upload'\nimport { isEmpty, isArray } from \"lodash\";\nimport \"@filerobot/core/dist/style.min.css\";\nimport \"@filerobot/explorer/dist/style.min.css\";\n\nlet isScriptLoaded: any = false;\nlet url: string = \"\";\n\nconst SelectorPage: React.FC<any> = function () {\n\n  const filerobot = useRef<any>(null);\n  // state of isError flag\n  const [isErrorPresent, setIsErrorPresent] = React.useState<boolean>(false);\n  // config in selector page\n  const [config, setConfig] = useState<any>();\n  // state for warning text to be used when error\n  const [warningText, setWarningText] = useState<string>(\n    ''\n  );\n  const appConfig = useAppConfig();\n  const [selectedAssetIds, setSelectedAssetIds] = useState<string[]>([]);\n  const damContainer = useRef(null);\n\n  // function to check null or missing values of config\n  const checkConfigValues = (configParams: any) => {\n    const configFieldsLength = rootConfig?.damEnv?.CONFIG_FIELDS?.length;\n    for (let i = 0; i < configFieldsLength; i += 1) {\n      if (!configParams[rootConfig?.damEnv?.CONFIG_FIELDS?.[i]]) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // function to set error\n  const setError = ({\n    isErr = false,\n    errorText = 'errorText',\n  }: TypeErrorFn) => {\n    setIsErrorPresent(isErr);\n    if (errorText) setWarningText(errorText);\n  };\n\n  const successFn = (assets: any[]) => {\n    window.opener.postMessage(\n      {\n        message: \"add\",\n        selectedAssets: assets,\n        type: rootConfig?.damEnv?.DAM_APP_NAME,\n      },\n      url\n    );\n    window.close();\n  };\n\n  const closeFn = () => window.close();\n\n  // function to load dam script and mount component\n  const compactViewImplementation = async (\n    configParams: any,\n    selectedIds: string[]\n  ) => {\n    if (rootConfig?.damEnv?.IS_DAM_SCRIPT) {\n      isScriptLoaded = await SelectorPageUtils.loadDAMScript(\n        rootConfig?.damEnv?.DAM_SCRIPT_URL as string\n      );\n      if (isScriptLoaded === true) {\n        // condition's for checking config variable's\n        if (checkConfigValues(configParams)) {\n          setIsErrorPresent(true);\n          return;\n        }\n        setIsErrorPresent(false);\n        rootConfig?.openComptactView?.(\n          configParams,\n          selectedIds,\n          successFn,\n          closeFn,\n          {\n            containerRef: damContainer,\n            containerClass: \"selector_container\",\n            containerId: \"selector_container\",\n          },\n          setError\n        );\n      }\n    }\n  };\n\n  const handleMessage = (event: MessageEvent) => {\n    const { data } = event;\n\n    if (data?.config) {\n      if (\n        data?.message === \"init\" &&\n        data?.type === rootConfig?.damEnv?.DAM_APP_NAME\n      ) {\n          const container = data?.config?.[\"container\"] || \"\";\n          const securityTemplateId = data?.config?.[\"security_template_id\"] || \"\";\n\n          filerobot.current = Filerobot({\n            securityTemplateId: securityTemplateId,\n            container: container,\n            dev: false,\n          })\n          .use(Explorer, {\n          config: {\n              limit: 50,\n              tagging: {\n              language: \"en\",\n              confidence: 60,\n              limit: 10,\n              }\n          },\n          target: \"#filerobot-widget\",\n          inline: true,\n          width: \"100%\",\n          height: \"100%\",\n          dismissUrlPathQueryUpdate: true,\n          showDetailsView: false,\n          showFolderTree: true,\n          floaty: false,\n          disableDownloadButton: true,\n          hideDownloadButtonIcon: true,\n          preventDownloadDefaultBehavior: true,\n          resetAfterClose: true,\n              // reference https://github.com/scaleflex/commercetools-filerobot-plugin/blob/master/src/components/filerobot/filerobot-dam.jsx\n              locale: {\n              strings: {\n                  mutualizedExportButtonLabel: 'Insert',\n                  mutualizedDownloadButton: 'Insert',\n              }\n          },\n          })\n          .use(XHRUpload) \n          .on('export', function (files, popupExportSuccessMsgFn, downloadFilesPackagedFn, downloadFileFn) {  \n            successFn(files)\n          });\n      \n          setConfig(data?.config);\n          compactViewImplementation(data?.config, data?.selectedIds);\n          setSelectedAssetIds(data?.selectedIds);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const { opener: windowOpener } = window;\n    if (windowOpener) {\n      const queryString = window.location.href\n        ?.split(\"?\")?.[1]\n        ?.split(\"=\")?.[1];\n      let postMessageUrl: string;\n      switch (queryString) {\n        case \"NA\":\n          postMessageUrl = process.env.REACT_APP_UI_URL_NA ?? \"\";\n          break;\n        case \"EU\":\n          postMessageUrl = process.env.REACT_APP_UI_URL_EU ?? \"\";\n          break;\n        case \"AZURE_NA\":\n          postMessageUrl = process.env.REACT_APP_UI_URL_AZURE_NA ?? \"\";\n          break;\n        case \"CUSTOM-FIELD\":\n          postMessageUrl = process.env.REACT_APP_CUSTOM_FIELD_URL ?? \"\";\n          break;\n        default:\n          postMessageUrl = process.env.REACT_APP_UI_URL_AZURE_EU ?? \"\";\n      }\n      url = postMessageUrl;\n      window.addEventListener(\"message\", handleMessage, false);\n      windowOpener.postMessage({ message: \"openedReady\" }, postMessageUrl);\n      window.addEventListener(\"beforeunload\", () => {\n        windowOpener.postMessage({ message: \"close\" }, postMessageUrl);\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"selector-page-wrapper\" data-testid=\"selector-wrapper\">\n      <div\n        className=\"selector_container mt-30 mr-20 ml-20 mb-20\"\n        id=\"selector_container\"\n        data-testid=\"selector-container\"\n        ref={damContainer}\n      >\n        {isErrorPresent ? (\n          <div className=\"info-wrapper\" data-testid=\"warning-component\">\n            isErrorPresent\n          </div>\n        ) : (\n          // eslint-disable-next-line\n          <>\n            {rootConfig?.damEnv?.IS_DAM_SCRIPT ? (\n              // If Compact view script avaialble\n              // eslint-disable-next-line\n             <></>\n            ) : (\n              // If there is no script custom component will be added\n            //   rootConfig?.customSelectorComponent?.(\n            //     config,\n            //     setError,\n            //     successFn,\n            //     closeFn,\n            //     selectedAssetIds\n            //   )\n            <div id=\"filerobot-widget\"></div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SelectorPage;\n"],"names":["SelectorPageUtils","loadDAMScript","url","Promise","resolve","scriptExists","document","getElementById","onload","_document$getElements","DAMScript","createElement","bodyTag","getElementsByTagName","src","id","type","readyState","onreadystatechange","appendChild","_jsx","className","children","configureConfigScreen","textField","labelText","helpText","placeholderText","instructionText","inputFieldType","saveInConfig","saveInServerConfig","selectField","options","label","value","defaultSelectedOption","radioField","customConfigComponent","config","serverConfig","handleCustomConfigUpdate","CustomComponent","customWholeJson","customJsonOptions","defaultFeilds","DAM_APP_NAME","ASSET_UNIQUE_ID","SELECTOR_PAGE_LOGO","CONFIG_FIELDS","IS_DAM_SCRIPT","DAM_SCRIPT_URL","DIRECT_SELECTOR_PAGE","getFilteredConfigObj","mapArr","checkObj","valueChecks","returnObj","forEach","key","_valueChecks$key","_valueChecks$key2","Array","isArray","length","includes","compareFn","a","b","checkArrEqual","arr1","arr2","_ref","_ref$sort","_ref2","_ref2$sort","sort","join","handleLocaleConfig","data","_customConfig$locale","customConfig","currentLocale","returnConfig","pairs","returnValue","locale","_customConfig$locale2","localeConfigObj","tempConfig","Object","keys","getSelectorConfig","props","_Object$keys","keyArr","appConfig","modifiedArr","filter","newConfig","getAssetType","extension","_extension","toLowerCase","assetType","audioExtensions","videoExtnesions","imageExtension","excelExtension","rootCustomField","filterAssetData","assets","map","asset","name","width","height","size","thumbnailUrl","previewUrl","platformUrl","getSelectorWindowUrl","contentTypeConfig","handleConfigtoSelectorPage","utils","DamEnvVariables","handleSelectorPageData","event","handleSelectorWindow","setError","rootSelectorPage","openComptactView","selectedIds","onSuccess","onCancel","containerRef","containerClass","containerId","customSelectorComponent","successFn","closeFn","selectedAssetIds","damEnv","rootConfigScreen","isScriptLoaded","_rootConfig$damEnv7","filerobot","useRef","isErrorPresent","setIsErrorPresent","React","setConfig","useState","warningText","setWarningText","setSelectedAssetIds","useAppConfig","damContainer","isErr","errorText","_rootConfig$damEnv3","window","opener","postMessage","message","selectedAssets","rootConfig","close","compactViewImplementation","async","configParams","_rootConfig$damEnv4","_rootConfig$damEnv5","_rootConfig$openCompt","_rootConfig$damEnv","_rootConfig$damEnv$CO","configFieldsLength","i","_rootConfig$damEnv2","_rootConfig$damEnv2$C","checkConfigValues","call","handleMessage","_rootConfig$damEnv6","_data$config","_data$config2","container","securityTemplateId","current","Filerobot","dev","use","Explorer","limit","tagging","language","confidence","target","inline","dismissUrlPathQueryUpdate","showDetailsView","showFolderTree","floaty","disableDownloadButton","hideDownloadButtonIcon","preventDownloadDefaultBehavior","resetAfterClose","strings","mutualizedExportButtonLabel","mutualizedDownloadButton","XHRUpload","on","files","popupExportSuccessMsgFn","downloadFilesPackagedFn","downloadFileFn","useEffect","_process$env$REACT_AP","_process$env$REACT_AP2","_process$env$REACT_AP3","_process$env$REACT_AP4","_process$env$REACT_AP5","windowOpener","_window$location$href","_window$location$href2","_window$location$href3","_window$location$href4","postMessageUrl","location","href","split","process","addEventListener","ref","_Fragment"],"sourceRoot":""}