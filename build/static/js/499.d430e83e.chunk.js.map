{"version":3,"file":"static/js/499.d430e83e.chunk.js","mappings":"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","sources":["containers/CustomField/CustomField.tsx","common/hooks/useCustomField.tsx"],"sourcesContent":["import React, { useCallback, useState, useRef, useEffect } from \"react\";\nimport { useAppConfig } from \"../../common/hooks/useAppConfig\";\nimport Explorer from '@filerobot/explorer'\nimport Filerobot from '@filerobot/core'\nimport XHRUpload from '@filerobot/xhr-upload'\nimport { useCustomField } from \"../../common/hooks/useCustomField\";\nimport { FileRobotData } from \"../../common/types/types\";\nimport { isEmpty, isArray } from \"lodash\";\nimport \"./CustomField.css\";\nimport \"@filerobot/core/dist/style.min.css\";\nimport \"@filerobot/explorer/dist/style.min.css\";\n\nconst CustomFieldExtension = () => {\n  const initialized = useRef(false)\n  const filerobot = useRef<any>(null);\n  const { customField, setFieldData }: any = useCustomField();\n  const [ stateFileRobot, setFileRobot ] = useState<FileRobotData>({\n    show: false,\n    files: [],\n  });\n  const [ stateFiles, setFiles ] = useState<any[]>([]);\n  const [ removeLastItem, setRemoveLastItem ] = useState(false);\n  const appConfig = useAppConfig();\n  const toggleFileRobotVisibility = () => {\n    setFileRobot((prev) => ({\n      show: !prev.show,\n      files: prev.files,\n    }));\n  };\n\n  const closeFileRobot = () => {\n    setFileRobot((prev) => ({\n      show: false,\n      files: prev.files,\n    }));\n  };\n\n  const removeImage = (uuid: any) => {\n    const filesArr = stateFileRobot.files.filter((file: any) => file.uuid != uuid)\n    if (filesArr.length == 0) setRemoveLastItem(true)\n    setFieldData(filesArr)\n  };\n\n  const removeAllImage = () => {\n    setFieldData([])\n    setRemoveLastItem(true)\n  };\n\n  useEffect(() => {\n    if (!isEmpty(appConfig) && appConfig !== null) {\n  \n      const container = appConfig?.[\"container\"] || \"\";\n      const securityTemplateId = appConfig?.[\"security_template_id\"] || \"\";\n   \n      filerobot.current = Filerobot({\n        securityTemplateId: securityTemplateId,\n        container: container,\n        dev: false,\n      })\n      .use(Explorer, {\n        config: {\n          limit: 50,\n          tagging: {\n            language: \"en\",\n            confidence: 60,\n            limit: 10,\n          }\n        },\n        target: \"#filerobot-widget\",\n        inline: true,\n        width: \"100%\",\n        height: \"600px\",\n        dismissUrlPathQueryUpdate: true,\n        showDetailsView: false,\n        showFolderTree: true,\n        floaty: false,\n        disableDownloadButton: true,\n        hideDownloadButtonIcon: true,\n        preventDownloadDefaultBehavior: true,\n        resetAfterClose: true,\n          // reference https://github.com/scaleflex/commercetools-filerobot-plugin/blob/master/src/components/filerobot/filerobot-dam.jsx\n          locale: {\n            strings: {\n                mutualizedExportButtonLabel: 'Insert',\n                mutualizedDownloadButton: 'Insert',\n            }\n        },\n      })\n      .use(XHRUpload) \n      .on('export', function (files, popupExportSuccessMsgFn, downloadFilesPackagedFn, downloadFileFn) {\n        const fileArr:any[] = []\n        files.forEach((selected: any) => {\n          const storeData = {\n                uuid: selected.file.uuid,\n                url: {\n                  cdn: selected.file.url.cdn\n                }\n              }\n          fileArr.push(storeData)\n        })\n        setFiles(fileArr)\n        setRemoveLastItem(false)\n      });\n    }\n  }, [appConfig]);\n\n  useEffect(() => {\n    if ((!isEmpty(customField) && customField !== null && !removeLastItem) || (isArray(customField) && customField.length == 0 && removeLastItem)){\n      setFileRobot({\n        show: false,\n        files: customField,\n      });\n    }\n  }, [customField]);\n\n  const getUnique = (array: any, key: any) => {\n    if (typeof key !== 'function') {\n      const property = key;\n      key = function(item: any) { return item[property]; };\n    }\n    return Array.from(array.reduce(function(map: any, item: any) {\n      const k = key(item);\n      if (!map.has(k)) map.set(k, item);\n      return map;\n    }, new Map()).values());\n  }\n\n  useEffect(() => {\n    const filesArr = getUnique(stateFileRobot.files.concat(stateFiles), 'uuid');\n    if (filesArr && filesArr.length > 0) setFieldData(filesArr)\n  },[stateFiles]);\n\n  return (\n    <div className=\"filerobot-widget-field\">\n      <button className={`button-10 ${stateFileRobot.show ? 'hidden': 'block'}`} onClick={toggleFileRobotVisibility}>Filerobot</button>\n      <div className={`filerobot-widget-content ${stateFileRobot.show ? 'block': 'hidden'}`}>\n        <div id=\"filerobot-widget\"></div>\n        <div onClick={closeFileRobot} className=\"btn-close\"> X </div>\n      </div>\n      <div className=\"filerobot-images\">\n      {\n        stateFileRobot.files && stateFileRobot.files.length > 0  ? stateFileRobot.files.map((file: any, index: number) => (\n          <div key={file.uuid} className=\"filerobot-image\">\n            <img src={file.url.cdn} />\n            <div onClick={() => removeImage(file.uuid)} className=\"remove-image-btn\">x</div>\n          </div>\n        )) : null\n      }\n      </div>\n    </div>\n  );\n};\n\nexport default CustomFieldExtension;\n","import { useContext } from \"react\";\nimport { CustomFieldExtensionContext, CustomFieldExtensionContextType } from \"../contexts/customFieldExtensionContext\";\n\n/**\n * Getter and setter hook for custom field data\n * @returns an object { customField, setFieldData, loading };\n *\n * Eg:\n * const { customField, setFieldData, loading } = useCustomField();\n */\nexport const useCustomField = () => {\n  const { customField, setFieldData, loading } = useContext(\n    CustomFieldExtensionContext\n  ) as CustomFieldExtensionContextType;\n\n  return { customField, setFieldData, loading };\n};\n"],"names":["CustomFieldExtension","useRef","filerobot","customField","setFieldData","useCustomField","loading","useContext","CustomFieldExtensionContext","stateFileRobot","setFileRobot","useState","show","files","stateFiles","setFiles","removeLastItem","setRemoveLastItem","appConfig","useAppConfig","useEffect","isEmpty","container","securityTemplateId","current","Filerobot","dev","use","Explorer","config","limit","tagging","language","confidence","target","inline","width","height","dismissUrlPathQueryUpdate","showDetailsView","showFolderTree","floaty","disableDownloadButton","hideDownloadButtonIcon","preventDownloadDefaultBehavior","resetAfterClose","locale","strings","mutualizedExportButtonLabel","mutualizedDownloadButton","XHRUpload","on","popupExportSuccessMsgFn","downloadFilesPackagedFn","downloadFileFn","fileArr","forEach","selected","storeData","uuid","file","url","cdn","push","isArray","length","filesArr","getUnique","array","key","property","item","Array","from","reduce","map","k","has","set","Map","values","concat","_jsxs","className","children","_jsx","onClick","toggleFileRobotVisibility","prev","id","closeFileRobot","index","src","filter","removeImage"],"sourceRoot":""}