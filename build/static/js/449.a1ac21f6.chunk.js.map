{"version":3,"file":"static/js/449.a1ac21f6.chunk.js","mappings":"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","sources":["common/constants/index.tsx","common/contexts/MarketplaceAppContext.tsx","components/AppFailed.tsx","components/WarningMessage/index.tsx","common/contexts/ConfigStateContext.tsx","containers/ConfigScreen/Components.tsx","common/providers/ConfigStateProvider.tsx","containers/ConfigScreen/index.tsx"],"sourcesContent":["const constantStyles = {\n  droppingDOMBorder: \"1px dashed #6C5CE7\",\n  droppingDOMBackground: \"#EFEDFC50\",\n  loaderColor: \"#6C5CE7\",\n  addBtnTooltip: { marginTop: \"20px\" },\n};\n\nconst limitationsDocUrl =\n  \"https://www.contentstack.com/docs/developers/create-custom-fields/limitations-of-custom-fields/\";\n\nconst constants = {\n  constantStyles,\n  limitationsDocUrl,\n};\n\nexport default constants;\n","import React from \"react\";\nimport { Props } from \"../types/types\";\n\nexport type MarketplaceAppContextType = {\n  appSdk: any;\n  appConfig: Props;\n  appFailed: boolean;\n};\n\nexport const MarketplaceAppContext =\n  React.createContext<MarketplaceAppContextType>({\n    appSdk: {},\n    appConfig: {},\n    appFailed: false,\n  });\n","import React from 'react';\nimport localeTexts from \"../common/locales/en-us\";\n\n/**\n * AppFailed component.\n * This components will be rendered if the App fails to initialize.( ContentStack SDK)\n */\nexport const AppFailed = () => {\n  const handleLearnMoreClick = () => {\n    window.open(localeTexts.AppFailed.button.url, \"_blank\");\n  };\n  return (\n    <div className=\"app-failed-container\">\n      <div className=\"app-component-container\" role=\"alert\">\n        <div className=\"app-content\">\n          <svg className=\"app-icon\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path\n              fillRule=\"evenodd\"\n              d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\"\n              clipRule=\"evenodd\"></path>\n          </svg>\n          <h3>\n            {localeTexts.AppFailed.Message1} <br />\n            {localeTexts.AppFailed.Message2}\n          </h3>\n        </div>\n        <div className=\"app-text\">{localeTexts.AppFailed.body}</div>\n        <div className=\"secondary-app-container\">\n          <button type=\"button\" onClick={handleLearnMoreClick}>\n            <svg className=\"app-learn-more\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M10 12a2 2 0 100-4 2 2 0 000 4z\"></path>\n              <path\n                fillRule=\"evenodd\"\n                d=\"M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z\"\n                clipRule=\"evenodd\"></path>\n            </svg>\n            {localeTexts.AppFailed.button.text}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Icon, Info } from \"@contentstack/venus-components\";\nimport { Props } from \"../../common/types/types\";\n\nconst WarningMessage: React.FC<Props> = function ({ content }) {\n  const infoIcon = (\n    <Icon icon=\"Warning\" size=\"small\" data-testid=\"warning-icon\" />\n  );\n  return (\n    <Info\n      className=\"component\"\n      icon={infoIcon}\n      content={content?.split(\"\\n\")?.map((i: string) => (\n        <div key={`key-${i}`} dangerouslySetInnerHTML={{ __html: i }} />\n      ))}\n      type=\"attention\"\n    />\n  );\n};\nexport default WarningMessage;\n","import { createContext } from \"react\";\n\ninterface TypeConfigStateContext {\n  CustomOptionsContext: {\n    customOptions: any[];\n    setCustomOptions: Function;\n  };\n  CustomCheckContext: {\n    isCustom: boolean;\n    setIsCustom: Function;\n  };\n  DamKeysContext: {\n    damKeys: any[];\n    setDamKeys: Function;\n  };\n  RadioInputContext: {\n    radioInputValues: any;\n    setRadioInputValues: Function;\n    updateRadioOptions: Function;\n  };\n  SelectInputContext: {\n    selectInputValues: any;\n    setSelectInputValues: Function;\n    updateSelectConfig: Function;\n  };\n  JSONCompContext: {\n    handleModalValue: Function;\n    updateCustomJSON: Function;\n    updateTypeObj: Function;\n  };\n}\n\nconst ConfigStateContext = createContext<TypeConfigStateContext>({\n  CustomOptionsContext: {\n    customOptions: [],\n    setCustomOptions: () => {},\n  },\n  CustomCheckContext: {\n    isCustom: false,\n    setIsCustom: () => {},\n  },\n  DamKeysContext: {\n    damKeys: [],\n    setDamKeys: () => {},\n  },\n  RadioInputContext: {\n    radioInputValues: {},\n    setRadioInputValues: () => {},\n    updateRadioOptions: () => {},\n  },\n  SelectInputContext: {\n    selectInputValues: {},\n    setSelectInputValues: () => {},\n    updateSelectConfig: () => {},\n  },\n  JSONCompContext: {\n    handleModalValue: () => {},\n    updateCustomJSON: () => {},\n    updateTypeObj: () => {},\n  },\n});\n\nexport default ConfigStateContext;\n","/* Import React modules */\nimport React, { useCallback, useState, useContext } from \"react\";\n/* Import other node modules */\nimport {\n  Field,\n  FieldLabel,\n  TextInput,\n  Line,\n  InstructionText,\n  Help,\n  Select,\n  Radio,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  ButtonGroup,\n  Button,\n  cbModal,\n  Icon,\n  Notification,\n} from \"@contentstack/venus-components\";\n/* Import our modules */\nimport {\n  TypeConfigComponent,\n  TypeOption,\n  TypeRadioOption,\n} from \"../../common/types/types\";\nimport localeTexts from \"../../common/locales/en-us\";\nimport WarningMessage from \"../../components/WarningMessage\";\nimport constants from \"../../common/constants\";\nimport AppConfigContext from \"../../common/contexts/AppConfigContext\";\nimport ConfigStateContext from \"../../common/contexts/ConfigStateContext\";\nimport ConfigScreenUtils from \"../../common/utils/ConfigScreenUtils\";\n/* Import node module CSS */\n/* Import our CSS */\n\n// component for Text Input Field\nexport const TextInputField = function ({\n  objKey,\n  objValue,\n  updateConfig,\n}: TypeConfigComponent) {\n  const { installationData, errorState } = useContext(AppConfigContext);\n  return (\n    <>\n      <Field>\n        <FieldLabel\n          required\n          error={errorState?.includes(objKey)}\n          htmlFor={`${objKey}-id`}\n          requiredText={\n            errorState?.includes(objKey)\n              ? localeTexts.ConfigFields.emptyValue\n              : undefined\n          }\n          data-testid=\"text_label\"\n        >\n          {\" \"}\n          {/* Change the label caption as per your requirement */}\n          {objValue?.labelText}\n        </FieldLabel>\n        {objValue?.helpText && (\n          <Help text={objValue?.helpText} data-testid=\"text_help\" />\n        )}\n        {/* Change the help caption as per your requirement */}\n        <TextInput\n          id={`${objKey}-id`}\n          required\n          value={\n            // eslint-disable-next-line\n            objValue?.saveInConfig\n              ? installationData?.configuration?.[objKey]\n              : objValue?.saveInServerConfig\n              ? installationData?.serverConfiguration?.[objKey]\n              : \"\"\n          }\n          placeholder={objValue?.placeholderText}\n          name={objKey}\n          onChange={updateConfig}\n          type={objValue?.inputFieldType}\n          canShowPassword\n          data-testid=\"text_input\"\n          version=\"v2\"\n        />\n        <InstructionText data-testid=\"text_instruction\">\n          <div\n            dangerouslySetInnerHTML={{\n              __html: objValue?.instructionText,\n            }}\n          />\n        </InstructionText>\n      </Field>\n      <Line type=\"dashed\" />\n    </>\n  );\n};\n\n// component for single radio option\nexport const RadioOption = function ({\n  fieldName,\n  mode,\n  index,\n  radioOption,\n  updateRadioOptions,\n}: TypeRadioOption) {\n  const updateRadio = useCallback(\n    () => updateRadioOptions(fieldName, mode),\n    [fieldName, mode]\n  );\n\n  return (\n    <Radio\n      key={`${fieldName}_${index}_option`}\n      id={mode?.value}\n      checked={mode?.value === radioOption?.value}\n      required\n      label={mode?.label}\n      name={`${fieldName}_options`}\n      onChange={updateRadio}\n    />\n  );\n};\n\n// component for Radio Options\nexport const RadioInputField = function ({\n  objKey,\n  objValue,\n}: TypeConfigComponent) {\n  const {\n    RadioInputContext: { radioInputValues, updateRadioOptions },\n  } = useContext(ConfigStateContext);\n  const { errorState } = useContext(AppConfigContext);\n\n  return (\n    <>\n      <Field>\n        <FieldLabel\n          required\n          error={errorState?.includes(objKey)}\n          requiredText={\n            errorState?.includes(objKey)\n              ? localeTexts.ConfigFields.emptyValue\n              : undefined\n          }\n          htmlFor={`${objKey}_options`}\n          data-testid=\"radio_label\"\n        >\n          {objValue?.labelText}\n        </FieldLabel>\n        {objValue?.helpText && (\n          <Help text={objValue?.helpText} data-testid=\"radio_help\" />\n        )}\n        <div className=\"Radio-wrapper\" data-testid=\"radio_wrapper\">\n          {objValue?.options?.map((option: TypeOption, index: number) => (\n            <RadioOption\n              key={option?.value}\n              fieldName={objKey}\n              mode={option}\n              index={index}\n              radioOption={radioInputValues?.[objKey]}\n              updateRadioOptions={updateRadioOptions}\n            />\n          ))}\n        </div>\n        <InstructionText data-testid=\"radio_instruction\">\n          <div\n            dangerouslySetInnerHTML={{\n              __html: objValue?.instructionText,\n            }}\n          />\n        </InstructionText>\n      </Field>\n      <Line type=\"dashed\" />\n    </>\n  );\n};\n\n// component for Select Options\nexport const SelectInputField = function ({\n  objKey,\n  objValue,\n}: TypeConfigComponent) {\n  const {\n    SelectInputContext: { selectInputValues, updateSelectConfig },\n  } = useContext(ConfigStateContext);\n  const { errorState } = useContext(AppConfigContext);\n  return (\n    <>\n      <Field>\n        <FieldLabel\n          required\n          error={errorState?.includes(objKey)}\n          requiredText={\n            errorState?.includes(objKey)\n              ? localeTexts.ConfigFields.emptyValue\n              : undefined\n          }\n          htmlFor={`${objKey}-id`}\n          data-testid=\"select_label\"\n        >\n          {objValue?.labelText}\n        </FieldLabel>\n        {objValue?.helpText && (\n          <Help text={objValue?.helpText} data-testid=\"select_help\" />\n        )}\n        <Select\n          onChange={(e: TypeOption) => updateSelectConfig(e, objKey)}\n          options={objValue?.options}\n          placeholder={objValue?.placeholderText}\n          value={selectInputValues?.[objKey]}\n          name={`${objKey}-id`}\n          data-testid=\"select_input\"\n          version=\"v2\"\n        />\n        <InstructionText data-testid=\"select_instruction\">\n          <div\n            dangerouslySetInnerHTML={{\n              __html: objValue?.instructionText,\n            }}\n          />\n        </InstructionText>\n      </Field>\n      <Line type=\"dashed\" />\n    </>\n  );\n};\n\nconst checkModalValue = ({ modalValue, customOptions }: any) => {\n  let returnValue: any[] = [];\n  modalValue = modalValue?.trim();\n  const matchValue = customOptions?.find((i: any) => i?.value === modalValue);\n  if (!matchValue) {\n    returnValue = [{ label: modalValue, value: modalValue }];\n  } else {\n    Notification({\n      displayContent: {\n        error: {\n          error_message: `${localeTexts.ConfigFields.customWholeJson.notification.errorS} \"${modalValue}\" ${localeTexts.ConfigFields.customWholeJson.notification.errorE}`,\n        },\n      },\n      notifyProps: {\n        hideProgressBar: true,\n        className: \"modal_toast_message\",\n      },\n      type: \"error\",\n    });\n  }\n  return returnValue;\n};\n\nexport const ModalComponent = function ({ props, handleModalValue }: any) {\n  const {\n    CustomOptionsContext: { customOptions },\n  } = useContext(ConfigStateContext);\n  const [modalValue, setModalValue] = useState(\"\");\n  const [selectOptions, setSelectOptions] = useState<any[]>([]);\n  const [options, setOptions] = useState<any>([...customOptions]);\n\n  const handleChange = async (e: any) => {\n    setModalValue(e?.target?.value);\n  };\n\n  const handleValueCreate = async (action: string) => {\n    const updatedValue = checkModalValue({\n      customOptions: options,\n      modalValue,\n    });\n    if (updatedValue?.length) {\n      setOptions([...options, ...updatedValue]);\n      setSelectOptions([...selectOptions, ...updatedValue]);\n      ConfigScreenUtils.toastMessage(\n        localeTexts.ConfigFields.customWholeJson.modal.successToast\n      );\n    }\n    if (action === \"create\") {\n      setModalValue(\"\");\n    } else {\n      handleModalValue(selectOptions, action, updatedValue);\n      props?.closeModal();\n    }\n  };\n\n  return (\n    <>\n      <ModalHeader\n        title={localeTexts.ConfigFields.customWholeJson.modal.header}\n        closeModal={() => {\n          handleModalValue(selectOptions, \"create\", []);\n          props?.closeModal();\n        }}\n      />\n      <ModalBody className=\"modalBodyCustomClass\">\n        <FieldLabel required htmlFor=\"label\">\n          {localeTexts.ConfigFields.customWholeJson.modal.label}\n        </FieldLabel>\n        <TextInput\n          required\n          autoFocus\n          value={modalValue}\n          placeholder={\n            localeTexts.ConfigFields.customWholeJson.modal.placeholder\n          }\n          name=\"label\"\n          autoComplete=\"off\"\n          onChange={handleChange}\n          version=\"v2\"\n        />\n        <InstructionText>\n          {localeTexts.ConfigFields.customWholeJson.modal.instructionS}\n          <br />\n          <p className=\"note-p\">\n            {localeTexts.ConfigFields.customWholeJson.modal.note}\n          </p>\n          {localeTexts.ConfigFields.customWholeJson.modal.instructionE}\n        </InstructionText>\n      </ModalBody>\n      <ModalFooter>\n        <ButtonGroup>\n          <Button\n            buttonType=\"light\"\n            version=\"v2\"\n            size=\"small\"\n            onClick={() => {\n              handleModalValue(selectOptions, \"create\", []);\n              props?.closeModal();\n            }}\n          >\n            {localeTexts.ConfigFields.customWholeJson.modal.btn.cancel}\n          </Button>\n          <Button\n            onClick={() => handleValueCreate(\"create\")}\n            buttonType=\"secondary\"\n            size=\"small\"\n            disabled={!modalValue?.length}\n            version=\"v2\"\n          >\n            <Icon icon=\"CheckedPurple\" />\n            {localeTexts.ConfigFields.customWholeJson.modal.btn.create}\n          </Button>\n          <Button\n            version=\"v2\"\n            size=\"small\"\n            disabled={!modalValue?.length}\n            onClick={() => handleValueCreate(\"createApply\")}\n          >\n            <Icon icon=\"CheckedWhite\" />\n            {localeTexts.ConfigFields.customWholeJson.modal.btn.apply}\n          </Button>\n        </ButtonGroup>\n      </ModalFooter>\n    </>\n  );\n};\n\nexport const JsonComponent = function () {\n  const {\n    CustomOptionsContext: { customOptions },\n    CustomCheckContext: { isCustom },\n    DamKeysContext: { damKeys },\n    JSONCompContext: { handleModalValue, updateCustomJSON, updateTypeObj },\n  } = useContext(ConfigStateContext);\n  return (\n    <>\n      <Line type=\"dashed\" />\n      <Field className=\"json-field\">\n        <FieldLabel required htmlFor=\"is_custom_json\">\n          {localeTexts.ConfigFields.entrySaveRadioButton.label}\n        </FieldLabel>\n        <Help text={localeTexts.ConfigFields.entrySaveRadioButton.help} />\n        <br />\n        <br />\n        <WarningMessage\n          content={localeTexts.ConfigFields.entrySaveRadioButton.notetext}\n        />\n        <div className=\"Radio-wrapper\">\n          <Radio\n            id=\"wholeJSON\"\n            checked={!isCustom}\n            required\n            label={localeTexts.ConfigFields.entrySaveRadioButton.wholeJson}\n            name=\"is_custom_json\"\n            value={false}\n            onChange={updateCustomJSON}\n          />\n          <Radio\n            id=\"customJSON\"\n            checked={isCustom}\n            required\n            label={localeTexts.ConfigFields.entrySaveRadioButton.customJson}\n            name=\"is_custom_json\"\n            value\n            onChange={updateCustomJSON}\n          />\n        </div>\n        <InstructionText>\n          {localeTexts.ConfigFields.entrySaveRadioButton.instruction}{\" \"}\n          {localeTexts.ConfigFields.entrySaveRadioButton.referS}{\" \"}\n          <a\n            href={constants.limitationsDocUrl}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            {localeTexts.ConfigFields.entrySaveRadioButton.custom}\n          </a>{\" \"}\n          {localeTexts.ConfigFields.entrySaveRadioButton.referE}\n        </InstructionText>\n      </Field>\n      {isCustom && (\n        <Field className=\"dam-keys\">\n          <FieldLabel required htmlFor=\"dam_keys\">\n            {localeTexts.ConfigFields.keysField.label}\n          </FieldLabel>\n          <Help text={localeTexts.ConfigFields.keysField.help} />\n          <Select\n            options={customOptions}\n            onChange={updateTypeObj}\n            value={damKeys}\n            isMulti\n            isSearchable\n            version=\"v2\"\n            hasAddOption\n            className=\"dam-keys-select\"\n            addOptionText={\n              <>\n                <Icon icon=\"Plus\" />\n                {localeTexts.ConfigFields.customWholeJson.modal.addOption}\n              </>\n            }\n            addOption={() =>\n              cbModal({\n                // eslint-disable-next-line\n                component: (props: any) => (\n                  <ModalComponent\n                    props={props}\n                    handleModalValue={handleModalValue}\n                  />\n                ),\n                testId: \"cs-modal\",\n              })\n            }\n          />\n        </Field>\n      )}\n    </>\n  );\n};\n","import React, {\n  useState,\n  useMemo,\n  useContext,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport rootConfig from \"../../root_config\";\nimport { TypeOption } from \"../types/types\";\nimport ConfigStateContext from \"../contexts/ConfigStateContext\";\nimport AppConfigContext from \"../contexts/AppConfigContext\";\nimport ConfigScreenUtils from \"../utils/ConfigScreenUtils\";\n\nconst ConfigStateProvider: React.FC<any> = function ({\n  children,\n  updateValueFunc,\n}) {\n  const configInputFields = rootConfig?.configureConfigScreen?.();\n\n  const {\n    jsonOptions,\n    defaultFeilds,\n    saveInConfig,\n    saveInServerConfig,\n    checkConfigFields,\n    installationData,\n  } = useContext(AppConfigContext);\n\n  // local state for options of custom json\n  const [customOptions, setCustomOptions] = useState<any[]>(jsonOptions);\n  // local state for custom / whole json boolean value\n  const [isCustom, setIsCustom] = React.useState(false);\n  // local state for selected options of custom json dropdown\n  const [damKeys, setDamKeys] = React.useState<any[]>(defaultFeilds ?? []);\n  // saved custom key options\n  const [keyPathOptions, setKeyPathOptions] = useState<any[]>([]);\n  // local state for radio option config\n  const [radioInputValues, setRadioInputValues] = React.useState<any>({\n    ...Object.keys(saveInConfig)?.reduce((acc, value) => {\n      if (saveInConfig?.[value]?.type === \"radioInputFields\")\n        return {\n          ...acc,\n          [value]: saveInConfig?.[value]?.options?.filter(\n            (option: any) =>\n              option?.value === saveInConfig?.[value]?.defaultSelectedOption\n          )?.[0],\n        };\n      return acc;\n    }, {}),\n    ...Object.keys(saveInServerConfig)?.reduce((acc, value) => {\n      if (saveInServerConfig?.[value]?.type === \"radioInputFields\")\n        return {\n          ...acc,\n          [value]: saveInServerConfig?.[value]?.options?.filter(\n            (option: any) =>\n              option?.value ===\n              saveInServerConfig?.[value]?.defaultSelectedOption\n          )?.[0],\n        };\n      return acc;\n    }, {}),\n  });\n  // local state for select option config\n  const [selectInputValues, setSelectInputValues] = React.useState<any>({\n    ...Object.keys(saveInConfig)?.reduce((acc, value) => {\n      if (saveInConfig?.[value]?.type === \"selectInputFields\")\n        return {\n          ...acc,\n          [value]: saveInConfig?.[value]?.options?.filter(\n            (option: any) =>\n              option?.value === saveInConfig?.[value]?.defaultSelectedOption\n          )?.[0],\n        };\n      return acc;\n    }, {}),\n    ...Object.keys(saveInServerConfig)?.reduce((acc, value) => {\n      if (saveInServerConfig?.[value]?.type === \"selectInputFields\")\n        return {\n          ...acc,\n          [value]: saveInServerConfig?.[value]?.options?.filter(\n            (option: any) =>\n              option?.value ===\n              saveInServerConfig?.[value]?.defaultSelectedOption\n          )?.[0],\n        };\n      return acc;\n    }, {}),\n  });\n\n  // updating the select option state\n  const updateSelectConfig = useCallback(\n    (e: TypeOption, fieldName: string) => {\n      setSelectInputValues({ ...selectInputValues, [fieldName]: e });\n      updateValueFunc(fieldName, e?.value);\n    },\n    [selectInputValues]\n  );\n\n  // updating the radio option state\n  const updateRadioOptions = useCallback(\n    (fieldName: string, option: TypeOption) => {\n      setRadioInputValues({ ...radioInputValues, [fieldName]: option });\n      updateValueFunc(fieldName, option?.value);\n    },\n    [radioInputValues]\n  );\n\n  const updateCustomJSON = (e: any) => {\n    const check = e?.target?.id !== \"wholeJSON\";\n    setIsCustom(check);\n    updateValueFunc(\"is_custom_json\", check, true);\n  };\n\n  const updateTypeObj = (list: any[]) => {\n    const damKeysTemp: any[] = [];\n    list?.forEach((key: any) => damKeysTemp?.push(key?.value));\n    setDamKeys(list);\n    updateValueFunc(\"dam_keys\", list, true);\n  };\n\n  const handleModalValue = (\n    modalValueArr: any[],\n    mode: string,\n    updatedValue: any[]\n  ) => {\n    const updatedOptions = [\n      ...keyPathOptions,\n      ...modalValueArr,\n      ...updatedValue,\n    ];\n    setKeyPathOptions(updatedOptions);\n    updateValueFunc(\"keypath_options\", updatedOptions, true);\n    setCustomOptions([...customOptions, ...modalValueArr, ...updatedValue]);\n    if (mode === \"createApply\") {\n      const selectedKeys = [...damKeys, ...updatedValue];\n      setDamKeys(selectedKeys);\n      updateTypeObj(selectedKeys);\n    }\n  };\n\n  useEffect(() => {\n    // getting the default key names for radio and select input\n    const { radioValuesKeys, selectValuesKeys } =\n      ConfigScreenUtils.getDefaultInputValues(configInputFields);\n\n    checkConfigFields(installationData);\n    setIsCustom(installationData?.configuration?.is_custom_json ?? false);\n    setDamKeys(installationData?.configuration?.dam_keys ?? []);\n    const keyOptions = installationData?.configuration?.keypath_options ?? [];\n    setKeyPathOptions(keyOptions);\n    setCustomOptions([...customOptions, ...keyOptions]);\n    const savedData = {\n      ...installationData?.configuration,\n      ...installationData?.serverConfiguration,\n    };\n    const { radioValuesObj, selectValuesObj } =\n      ConfigScreenUtils.getIntialValueofComponents({\n        savedData,\n        radioValuesKeys,\n        selectValuesKeys,\n        configInputFields,\n      });\n    setRadioInputValues(radioValuesObj);\n    setSelectInputValues(selectValuesObj);\n  }, [installationData?.configuration, installationData?.serverConfiguration]);\n\n  const contextValue = useMemo(\n    () => ({\n      CustomOptionsContext: {\n        customOptions,\n        setCustomOptions,\n      },\n      CustomCheckContext: {\n        isCustom,\n        setIsCustom,\n      },\n      DamKeysContext: {\n        damKeys,\n        setDamKeys,\n      },\n      RadioInputContext: {\n        radioInputValues,\n        setRadioInputValues,\n        updateRadioOptions,\n      },\n      SelectInputContext: {\n        selectInputValues,\n        setSelectInputValues,\n        updateSelectConfig,\n      },\n      JSONCompContext: {\n        handleModalValue,\n        updateCustomJSON,\n        updateTypeObj,\n      },\n    }),\n    [\n      customOptions,\n      setCustomOptions,\n      isCustom,\n      setIsCustom,\n      damKeys,\n      setDamKeys,\n      radioInputValues,\n      setRadioInputValues,\n      updateRadioOptions,\n      selectInputValues,\n      setSelectInputValues,\n      updateSelectConfig,\n      handleModalValue,\n      updateCustomJSON,\n      updateTypeObj,\n    ]\n  );\n\n  return (\n    <ConfigStateContext.Provider value={contextValue}>\n      {children}\n    </ConfigStateContext.Provider>\n  );\n};\nexport default ConfigStateProvider;\n","/* Import React modules */\nimport React, { useCallback, useContext } from \"react\";\n/* ContentStack Modules */\n// For all the available venus components, please refer below doc\n// https://venus-storybook.contentstack.com/?path=/docs/components-textinput--default\nimport \"@contentstack/venus-components/build/main.css\";\n/* Import our modules */\nimport {\n  JsonComponent,\n  RadioInputField,\n  SelectInputField,\n  TextInputField,\n} from \"./Components\";\nimport AppConfigContext from \"../../common/contexts/AppConfigContext\";\nimport ConfigStateProvider from \"../../common/providers/ConfigStateProvider\";\nimport { MarketplaceAppContext } from \"../../common/contexts/MarketplaceAppContext\";\nimport { AppFailed } from \"../../components/AppFailed\";\nimport rootConfig from \"../../root_config\";\n/* Import our CSS */\nimport \"./styles.css\";\nimport { TypeCustomConfigUpdateParams } from \"../../common/types/types\";\n\nconst ConfigScreen: React.FC = function () {\n  const { appFailed } = useContext(MarketplaceAppContext);\n  // context usage for global states thorughout the component\n  const { installationData, setInstallationData, checkConfigFields } =\n    useContext(AppConfigContext);\n\n  // entire configuration object returned from configureConfigScreen\n  const configInputFields: any = rootConfig?.configureConfigScreen?.();\n\n  /** updateConfig - Function where you should update the State variable\n   * Call this function whenever any field value is changed in the DOM\n   * */\n  const updateConfig = useCallback(\n    async (e: any, inConfig?: boolean, inServerConfig?: boolean) => {\n      // eslint-disable-next-line prefer-const\n      let { name: fieldName, value: fieldValue } = e?.target ?? {};\n      if (typeof fieldValue === \"string\") {\n        fieldValue = fieldValue?.trim();\n      }\n\n      const updatedConfig = installationData?.configuration || {};\n      const updatedServerConfig = installationData?.serverConfiguration || {};\n\n      if (inConfig || configInputFields?.[fieldName]?.saveInConfig) {\n        updatedConfig[fieldName] = fieldValue;\n      }\n      /* Use ServerConfiguration Only When Webhook is Enbaled */\n      if (\n        inServerConfig ||\n        configInputFields?.[fieldName]?.saveInServerConfig\n      ) {\n        updatedServerConfig[fieldName] = fieldValue;\n      }\n      checkConfigFields({\n        configuration: updatedConfig,\n        serverConfiguration: updatedServerConfig,\n      });\n      setInstallationData({\n        configuration: updatedConfig,\n        serverConfiguration: updatedServerConfig,\n      });\n      return true;\n    },\n    [\n      setInstallationData,\n      installationData,\n      installationData?.configuration,\n      installationData?.serverConfiguration,\n    ]\n  );\n\n  // converting the config in proper format for updateConfig\n  const updateValueFunc = (\n    configName: string,\n    configValue: any,\n    inConfig?: boolean,\n    inServerConfig?: boolean\n  ) => {\n    const value: any = {};\n    value.target = { name: configName, value: configValue };\n    updateConfig(value, inConfig, inServerConfig);\n  };\n\n  // updating the custom config state\n  const handleCustomConfigUpdate = ({\n    fieldName,\n    fieldValue,\n    saveConfig,\n    saveServerConfig,\n  }: TypeCustomConfigUpdateParams) => {\n    const configObj: any = {};\n    configObj.target = { name: fieldName, value: fieldValue };\n    updateConfig(configObj, saveConfig, saveServerConfig);\n  };\n\n  // return render jsx for the config object provided\n  const renderConfig = () =>\n    Object.entries(configInputFields)?.map(([objKey, objValue, index]: any) => {\n      switch (objValue?.type) {\n        case \"textInputFields\":\n          return (\n            <div key={`${objKey}_${index}`}>\n              <TextInputField\n                objKey={objKey}\n                objValue={objValue}\n                updateConfig={updateConfig}\n              />\n            </div>\n          );\n        case \"radioInputFields\":\n          return (\n            <div key={`${objKey}_${index}`}>\n              <RadioInputField objKey={objKey} objValue={objValue} />\n            </div>\n          );\n        case \"selectInputFields\":\n          return (\n            <div key={`${objKey}_${index}`}>\n              <SelectInputField objKey={objKey} objValue={objValue} />\n            </div>\n          );\n        default:\n          // eslint-disable-next-line\n          return <></>;\n      }\n    });\n\n  /* If need to get any data from API then use,\n  getDataFromAPI({queryParams, headers, method, body}) function.\n  Refer services/index.ts for more details and update the API\n  call there as per requirement. */\n\n  return (\n    <div className=\"layout-container\">\n      <div className=\"page-wrapper\">\n        {appFailed ? (\n          <AppFailed />\n        ) : (\n          <ConfigStateProvider updateValueFunc={updateValueFunc}>\n            <div className=\"config-wrapper\" data-testid=\"config-wrapper\">\n              {renderConfig()}\n              {rootConfig?.customConfigComponent?.(\n                installationData?.configuration,\n                installationData?.serverConfiguration,\n                handleCustomConfigUpdate\n              )}\n              {/* <JsonComponent /> */}\n            </div>\n          </ConfigStateProvider>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ConfigScreen;\n"],"names":["constantStyles","droppingDOMBorder","droppingDOMBackground","loaderColor","addBtnTooltip","marginTop","limitationsDocUrl","MarketplaceAppContext","React","appSdk","appConfig","appFailed","AppFailed","_jsx","className","children","_jsxs","role","fill","viewBox","xmlns","fillRule","d","clipRule","localeTexts","Message1","Message2","body","type","onClick","handleLearnMoreClick","window","open","button","url","text","_ref","_content$split","content","infoIcon","Icon","icon","size","Info","split","map","i","dangerouslySetInnerHTML","__html","concat","createContext","CustomOptionsContext","customOptions","setCustomOptions","CustomCheckContext","isCustom","setIsCustom","DamKeysContext","damKeys","setDamKeys","RadioInputContext","radioInputValues","setRadioInputValues","updateRadioOptions","SelectInputContext","selectInputValues","setSelectInputValues","updateSelectConfig","JSONCompContext","handleModalValue","updateCustomJSON","updateTypeObj","TextInputField","_installationData$con","_installationData$ser","objKey","objValue","updateConfig","installationData","errorState","useContext","AppConfigContext","_Fragment","Field","FieldLabel","required","error","includes","htmlFor","requiredText","ConfigFields","emptyValue","undefined","labelText","helpText","Help","TextInput","id","value","saveInConfig","configuration","saveInServerConfig","serverConfiguration","placeholder","placeholderText","name","onChange","inputFieldType","canShowPassword","version","InstructionText","instructionText","Line","RadioOption","_ref2","fieldName","mode","index","radioOption","updateRadio","useCallback","Radio","checked","label","RadioInputField","_ref3","_objValue$options","ConfigStateContext","options","option","SelectInputField","_ref4","Select","e","_rootConfig$configure","_Object$keys","_Object$keys2","_Object$keys3","_Object$keys4","updateValueFunc","configInputFields","rootConfig","configureConfigScreen","call","jsonOptions","defaultFeilds","checkConfigFields","useState","keyPathOptions","setKeyPathOptions","Object","keys","reduce","acc","_saveInConfig$value","_saveInConfig$value2","_saveInConfig$value2$","_saveInConfig$value2$2","filter","_saveInConfig$value3","defaultSelectedOption","_saveInServerConfig$v","_saveInServerConfig$v2","_saveInServerConfig$v3","_saveInServerConfig$v4","_saveInServerConfig$v5","_saveInConfig$value4","_saveInConfig$value5","_saveInConfig$value5$","_saveInConfig$value5$2","_saveInConfig$value6","_saveInServerConfig$v6","_saveInServerConfig$v7","_saveInServerConfig$v8","_saveInServerConfig$v9","_saveInServerConfig$v10","_e$target","check","target","list","damKeysTemp","forEach","key","push","modalValueArr","updatedValue","updatedOptions","selectedKeys","useEffect","_installationData$con2","_installationData$con3","_installationData$con4","_installationData$con5","_installationData$con6","radioValuesKeys","selectValuesKeys","ConfigScreenUtils","getDefaultInputValues","is_custom_json","dam_keys","keyOptions","keypath_options","savedData","radioValuesObj","selectValuesObj","getIntialValueofComponents","contextValue","useMemo","Provider","_rootConfig$customCon","setInstallationData","async","inConfig","inServerConfig","_configInputFields$fi","_configInputFields$fi2","fieldValue","_fieldValue","trim","updatedConfig","updatedServerConfig","ConfigStateProvider","configName","configValue","renderConfig","_Object$entries","entries","customConfigComponent","saveConfig","saveServerConfig","configObj"],"sourceRoot":""}